import React, {useEffect, useState} from "react";
import {
    useCountGroupAdminQuery,
    useDeleteByExpelledMutation, useExpelEverybodyMutation, useGetAllPersonsQuery,
    useGetExpelledCountQuery,
    useMinGroupAdminQuery
} from "../../store/types.generated";
import toast from "react-hot-toast";
import {ShowStudyGroupModalWithData} from "../ShowStudyGroupModal";

export function CommandsPage() {
    const [shouldBeExpelled, setShouldBeExpelled] = useState(0);
    const [showStudyGroupModalOpen, setShowStudyGroupModalOpen] = useState(false);
    const [countGroupAdminId, setCountGroupAdminId] = useState<number | undefined>(undefined);
    const [expellGroupid, setExpellGroupId] = useState(1);

    const [deleteByShouldBeExpelled] = useDeleteByExpelledMutation();
    const {data: groupAdmins} = useGetAllPersonsQuery();
    const {data: minGroupAdmin, refetch: refetchMinGroupAdmin} = useMinGroupAdminQuery();
    const {
        data: countByGroupAdmin,
        refetch: refetchCountByGroupAdmin
    } = useCountGroupAdminQuery({groupAdminId: countGroupAdminId});
    const [expellEveryBody] = useExpelEverybodyMutation();
    const {data: expelledCount, refetch: updateExpelledCount} = useGetExpelledCountQuery();

    return <div className="pl-10 p-4">
        <h1 className="text-3xl font-bold">–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</h1>
        <ul className="list-disc text-2xl">
            –í —Å–∏—Å—Ç–µ–º–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            –Ω–∞–¥ –æ–±—ä–µ–∫—Ç–∞–º–∏:
            <li>
                <button
                    className="underline text-blue-700"
                    onClick={() => {
                        deleteByShouldBeExpelled({expelled: shouldBeExpelled})
                            .unwrap()
                            .then(() => toast("–û–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω!", {icon: "üóëÔ∏è"}))
                            .catch(() => toast("–¢–∞–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ—Ç!", {icon: "‚ùå"}))
                    }}
                >–£–¥–∞–ª–∏—Ç—å
                </button>
                {" "}–æ–¥–∏–Ω (–ª—é–±–æ–π) –æ–±—ä–µ–∫—Ç, –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è shouldBeExpelled –∫–æ—Ç–æ—Ä–æ–≥–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É.
                <input
                    type="number"
                    className="border-black border"
                    placeholder="shouldBeExpelled"
                    value={shouldBeExpelled}
                    onChange={e => setShouldBeExpelled(+e.target.value)}
                />
            </li>
            <li>
                <button
                    className="underline text-blue-700"
                    onClick={() => {
                        refetchMinGroupAdmin()
                            .then(() => setShowStudyGroupModalOpen(true))
                    }}
                >
                    –í–µ—Ä–Ω—É—Ç—å
                </button>
                {" "}–æ–¥–∏–Ω (–ª—é–±–æ–π) –æ–±—ä–µ–∫—Ç, –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è groupAdmin –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º.
            </li>
            <li>
                <button
                    className="underline text-blue-700"
                    onClick={() => {
                        refetchCountByGroupAdmin();
                    }}
                >
                    –í–µ—Ä–Ω—É—Ç—å
                </button>
                {" "}–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ ({countByGroupAdmin}) , –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è groupAdmin –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É.
                <select
                    name="–ê–¥–º–∏–Ω"
                    value={countGroupAdminId}
                    onChange={e =>
                    {
                        setCountGroupAdminId(e.target.value !== "Undefined" ? parseInt(e.target.value) : undefined)
                        refetchCountByGroupAdmin();
                    }}
                    className="border border-black"
                >
                    {
                        groupAdmins?.length ? (
                            groupAdmins.map((person, index) => (
                                <option key={index} value={person.id || "DEFAULT_VALUE"}>
                                    {person.name || "Unnamed"}
                                </option>
                            ))
                        ) : (
                            <option disabled>No persons available</option>
                        )

                    }
                    <option value={undefined}>
                        Undefined
                    </option>
                </select>
            </li>
            <li>
                <button
                    className="underline text-blue-700"
                    onClick={() => {
                        expellEveryBody({groupId: expellGroupid})
                            .unwrap()
                            .then(() => toast("–°—Ç—É–¥–µ–Ω—Ç—ã –æ—Ç—á–∏—Å–ª–µ–Ω—ã!", {icon: "üò¢"}))
                            .catch(() => toast("–¢–∞–∫–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç!", {icon: "‚ùå"}))
                    }}
                >
                    –û—Ç—á–∏—Å–ª–∏—Ç—å
                </button>
                {" "}–≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.
                <input
                    type="number"
                    className="border-black border"
                    placeholder="groupId"
                    value={expellGroupid}
                    onChange={e => setExpellGroupId(+e.target.value)}
                />
            </li>
            <li>
                <button
                    className="underline text-blue-700"
                    onClick={() => {
                        updateExpelledCount();
                    }}
                >
                    –ü–æ—Å—á–∏—Ç–∞—Ç—å
                </button>
                {" "}–æ–±—â–µ–µ —á–∏—Å–ª–æ –æ—Ç—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö. ({expelledCount})
            </li>
        </ul>
        {minGroupAdmin && <ShowStudyGroupModalWithData
            isModalOpen={showStudyGroupModalOpen}
            closeModal={() => setShowStudyGroupModalOpen(false)}
            data={minGroupAdmin}
        />}
    </div>
}